#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define U_TAPPING_TERM 200

/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball>;
        input-processors = <&zip_xy_scaler 1 2>, <&zip_temp_layer 6 400>;

        // Switch to auto-mouse temp layer, decrease sensitivity

        scroll {
            layers = <5>; // SCROLL
            input-processors =
                <&zip_xy_scaler 1 5>,
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_transform (INPUT_TRANSFORM_Y_INVERT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <26 27>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <28 27>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <26 27 28>;
        };

        Escape {
            bindings = <&mt GRAVE ESCAPE>;
            key-positions = <1 0>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <10 11 12>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <9 8>;
        };

        enter {
            bindings = <&kp RET>;
            key-positions = <18 17>;
            layers = <0 1 3 6 5>;
        };

        reset1 {
            bindings = <&sys_reset>;
            key-positions = <0 11 22>;
        };

        reset2 {
            bindings = <&sys_reset>;
            key-positions = <9 18 27>;
        };

        print {
            bindings = <&screenshot>;
            key-positions = <20 21 22>;
        };

        num_layer {
            bindings = <&to 3>;
            key-positions = <6 7 5>;
        };

        bt_layer {
            bindings = <&to 4>;
            key-positions = <4 3 2>;
        };

        default {
            bindings = <&to 0>;
            key-positions = <18 15 16 17>;
        };

        qwerty {
            bindings = <&to 1>;
            key-positions = <29 19>;
        };

        tilde {
            bindings = <&mt LS(GRAVE) GRAVE>;
            key-positions = <1 0>;
            layers = <2>;
        };

        scroll {
            bindings = <&mo 5>;
            key-positions = <24 23>;
        };

        mute {
            bindings = <&kp K_MUTE>;
            key-positions = <40 39 33 34>;
            layers = <2>;
        };

        copy-paste {
            bindings = <&mt RC(V) RC(C)>;
            key-positions = <28 29>;
        };

        LeftClickLeft {
            bindings = <&mkp LCLK>;
            key-positions = <21 22>;
        };

        RightClickLeft {
            bindings = <&mkp RCLK>;
            key-positions = <23 22>;
        };

        MiddleClickLeft {
            bindings = <&mkp MCLK>;
            key-positions = <21 22 23>;
        };

        Back {
            bindings = <&kp C_AC_BACK>;
            key-positions = <20 21>;
        };

        Forward {
            bindings = <&kp C_AC_FORWARD>;
            key-positions = <24 23>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    macros {
        screenshot: screenshot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LS(LEFT_GUI)>,
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LS(LEFT_GUI)>;

            label = "SCREENSHOT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_dh {
            bindings = <
  &kp Q             &kp W               &kp F          &kp P             &kp B          &kp J        &kp L              &kp U          &kp Y                &u_mt COLON SEMI
  &kp A             &u_mt LEFT_SHIFT R  &u_mt LCTRL S  &u_mt LEFT_ALT T  &kp G          &kp M        &u_mt RIGHT_ALT N  &u_mt RCTRL E  &u_mt RIGHT_SHIFT I  &kp O
  &u_mt LEFT_GUI Z  &kp X               &kp C          &kp D             &kp V          &kp K        &kp H              &kp COMMA      &kp DOT              &u_mt QUESTION SLASH
                                        &lt 7 LG(TAB)  &lt 3 TAB         &lt 2 SPACE    &lt 2 SPACE  &kp BACKSPACE
            >;
        };

        Qwerty {
            bindings = <
  &kp Q             &kp W               &kp E                 &kp R             &kp T          &kp Y        &kp U              &kp I                  &kp O                &kp P
  &kp A             &u_mt LEFT_SHIFT S  &u_mt LEFT_CONTROL D  &u_mt LEFT_ALT F  &kp G          &kp H        &u_mt RIGHT_ALT J  &u_mt RIGHT_CONTROL K  &u_mt RIGHT_SHIFT L  &mt COLON SEMI
  &u_mt LEFT_GUI Z  &kp X               &kp C                 &kp V             &kp B          &kp N        &kp M              &kp COMMA              &kp DOT              &kp FSLH
                                        &mt LC(V) LC(C)       &lt 4 TAB         &lt 1 SPACE    &lt 2 SPACE  &kp BACKSPACE
            >;
        };

        arrow_numbers {
            bindings = <
  &mt EXCLAMATION NUMBER_1     &mt AT_SIGN NUMBER_2           &mt HASH NUMBER_3  &mt DLLR NUMBER_4  &mt PRCNT N5    &mt CARET NUMBER_6  &mt AMPS NUMBER_7  &mt ASTRK NUMBER_8  &mt LPAR NUMBER_9  &mt RPAR NUMBER_0
  &mt UNDER MINUS              &mt PLUS EQUAL                 &none              &none              &none           &kp HOME            &kp PG_UP          &kp UP_ARROW        &kp PAGE_DOWN      &u_mt DOUBLE_QUOTES SQT
  &mt LEFT_BRACE LEFT_BRACKET  &mt RIGHT_BRACE RIGHT_BRACKET  &none              &none              &none           &kp END             &kp LEFT_ARROW     &kp DOWN            &kp RIGHT          &mt LS(BACKSLASH) BACKSLASH
                                                              &none              &none              &none           &kp C_VOLUME_DOWN   &kp C_VOLUME_UP
            >;
        };

        F_Num {
            bindings = <
  &none        &kp F1  &kp F2   &kp F3   &kp F4     &kp KP_PLUS      &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS
  &none        &kp F5  &kp F6   &kp F7   &kp F8     &kp KP_MULTIPLY  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_DIVIDE
  &bootloader  &kp F9  &kp F10  &kp F11  &kp F12    &kp COMMA        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_EQUAL
                       &none    &none    &none      &kp KP_N0        &kp PERIOD
            >;
        };

        bt_layer {
            bindings = <
  &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
  &trans          &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans
  &bt BT_CLR_ALL  &bt BT_CLR    &trans        &bt BT_PRV    &bt BT_NXT      &trans  &trans  &trans  &trans  &bootloader
                                &trans        &trans        &trans          &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans
                  &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        functions {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
